}
plot(X[1,],X[2,],main="bivariate normal with variance 2, covariance 1",asp=1,xlim=c(-5,5),ylim=c(-5,5))
sigma = A%*%t(A)
sigma
library(LaplacesDemon)
library(MASS)
f1 = list(mean = matrix(c(0,0)), S = matrix(c(1,3/5,3/5,2),2,2) )
normal_multivar = function(vals, mean, S){
# extrair dimens達o k
k = dim(vals)[1]
p1 = (2*pi)**(-k/2)
# calcular  a determinante da matriz de covariancia
detm = det(S)
p2 = detm**(-1/2)
# calcular a matriz inversa da matriz de cov
dif = (vals - mean)
p3 = exp( (-0.5*t(dif)%*%ginv(S))%*%dif )
return(p1*p2*p3)
}
vals = matrix(c(2,-2))
res = normal_multivar(vals, f1$mean, f1$S)
# plotting
n = 10**3
seq1 = seq(-5,5, length = n)
seq2 = seq(-5,5, length = n)
A = matrix(0,ncol = n, nrow = n)
for(i in 1:length(seq1)){
for(j in 1:length(seq2)){
A[i,j] = A[i,j] + normal_multivar( matrix(c(seq1[i],seq2[j])) , f1$mean, f1$S )
}
}
image( seq1, seq2, A, col=topo.colors(100) )
# plotting
n = 200
seq1 = seq(-5,5, length = n)
seq2 = seq(-5,5, length = n)
A = matrix(0,ncol = n, nrow = n)
for(i in 1:length(seq1)){
for(j in 1:length(seq2)){
A[i,j] = A[i,j] + normal_multivar( matrix(c(seq1[i],seq2[j])) , f1$mean, f1$S )
}
}
image( seq1, seq2, A, col=topo.colors(100) )
for(i in 1:length(seq1)){
for(j in 1:length(seq2)){
A[i,j] =  normal_multivar( matrix(c(seq1[i],seq2[j])) , f1$mean, f1$S )
}
}
image( seq1, seq2, A, col=topo.colors(100) )
seq1 = seq(-5,5, length = n)
seq2 = seq(-5,5, length = n)
for(i in 1:length(seq1)){
for(j in 1:length(seq2)){
A[i,j] =  normal_multivar( matrix(c(seq1[i],seq2[j])) , f1$mean, f1$S )
}
}
image( seq1, seq2, A, col=topo.colors(100) )
seq1 = seq(-10,10, length = n)
seq2 = seq(-10,10, length = n)
A = matrix(0,ncol = n, nrow = n)
for(i in 1:length(seq1)){
for(j in 1:length(seq2)){
A[i,j] =  normal_multivar( matrix(c(seq1[i],seq2[j])) , f1$mean, f1$S )
}
}
image( seq1, seq2, A, col=topo.colors(100) )
seq1 = seq(-1,1, length = n)
seq2 = seq(-1,1, length = n)
A = matrix(0,ncol = n, nrow = n)
for(i in 1:length(seq1)){
for(j in 1:length(seq2)){
A[i,j] =  normal_multivar( matrix(c(seq1[i],seq2[j])) , f1$mean, f1$S )
}
}
image( seq1, seq2, A, col=topo.colors(100) )
seq1 = seq(-5,5, length = n)
seq2 = seq(-5,5, length = n)
A = matrix(0,ncol = n, nrow = n)
for(i in 1:length(seq1)){
for(j in 1:length(seq2)){
A[i,j] =  normal_multivar( matrix(c(seq1[i],seq2[j])) , f1$mean, f1$S )
}
}
image( seq1, seq2, A, col=topo.colors(100) )
library(plotly)
install.packages('plotly')
library(plotly)
library(plotly)
p <- plot_ly(z = A, type = "contour")
p <- plot_ly(seq1,seq2, z = A, type = "contour")
p <- plot_ly(z = ~volcano, type = "contour")
chart_link = api_create(p, filename="contour-basic")
chart_link
chart_link = api_create(p, filename="contour-basic")
p <- plot_ly(
x = c(-9, -6, -5, -3, -1),
y = c(0, 1, 4, 5, 7),
z = matrix(c(10, 10.625, 12.5, 15.625, 20, 5.625, 6.25, 8.125, 11.25, 15.625, 2.5, 3.125, 5, 8.125, 12.5, 0.625, 1.25, 3.125,
6.25, 10.625, 0, 0.625, 2.5, 5.625, 10), nrow = 5, ncol = 5),
type = "contour"
)
chart_link = api_create(p, filename="contour-coordinates")
p <- plot_ly(
x = c(-9, -6, -5, -3, -1),
y = c(0, 1, 4, 5, 7),
z = matrix(c(10, 10.625, 12.5, 15.625, 20, 5.625, 6.25, 8.125, 11.25, 15.625, 2.5, 3.125, 5, 8.125, 12.5, 0.625, 1.25, 3.125,
6.25, 10.625, 0, 0.625, 2.5, 5.625, 10), nrow = 5, ncol = 5),
type = "contour"
)
library(plotly)
p <- plot_ly(
x = c(-9, -6, -5, -3, -1),
y = c(0, 1, 4, 5, 7),
z = matrix(c(10, 10.625, 12.5, 15.625, 20, 5.625, 6.25, 8.125, 11.25, 15.625, 2.5, 3.125, 5, 8.125, 12.5, 0.625, 1.25, 3.125,
6.25, 10.625, 0, 0.625, 2.5, 5.625, 10), nrow = 5, ncol = 5),
type = "contour"
)
chart_link = api_create(p, filename="contour-coordinates")
chart_link
a
# install.packages('plotly')
library(LaplacesDemon)
library(plotly)
library(MASS)
f1 = list(mean = matrix(c(0,0)), S = matrix(c(1,3/5,3/5,2),2,2) )
normal_multivar = function(vals, mean, S){
# extrair dimens達o k
k = dim(vals)[1]
p1 = (2*pi)**(-k/2)
# calcular  a determinante da matriz de covariancia
detm = det(S)
p2 = detm**(-1/2)
# calcular a matriz inversa da matriz de cov
dif = (vals - mean)
p3 = exp( (-0.5*t(dif)%*%ginv(S))%*%dif )
return(p1*p2*p3)
}
vals = matrix(c(2,-2))
res = normal_multivar(vals, f1$mean, f1$S)
# # testing with library
# dmvt(c(vals), c(f1$mean),f1$S)
# plotting
n = 200
seq1 = seq(-5,5, length = n)
seq2 = seq(-5,5, length = n)
A = matrix(0,ncol = n, nrow = n)
for(i in 1:length(seq1)){
for(j in 1:length(seq2)){
A[i,j] =  normal_multivar( matrix(c(seq1[i],seq2[j])) , f1$mean, f1$S )
}
}
image( seq1, seq2, A, col=topo.colors(100) )
f1 = list(mean = matrix(c(0,0)), S = matrix(c(2,1,1,2),2,2) )
f2 = list(mean = matrix(c(0,0)), S = matrix(c(1,3/5,3/5,2),2,2) )
normal_multivar = function(vals, mean, S){
# extrair dimens達o k
k = dim(vals)[1]
p1 = (2*pi)**(-k/2)
# calcular  a determinante da matriz de covariancia
detm = det(S)
p2 = detm**(-1/2)
# calcular a matriz inversa da matriz de cov
dif = (vals - mean)
p3 = exp( (-0.5*t(dif)%*%ginv(S))%*%dif )
return(p1*p2*p3)
}
vals = matrix(c(2,-2))
res = normal_multivar(vals, f1$mean, f1$S)
A = matrix(0,ncol = n, nrow = n)
for(i in 1:length(seq1)){
for(j in 1:length(seq2)){
A[i,j] =  normal_multivar( matrix(c(seq1[i],seq2[j])) , f1$mean, f1$S )
}
}
image( seq1, seq2, A, col=topo.colors(100) )
f1 = list(mean = matrix(c(2,1)), S = matrix(c(2,1,1,2),2,2) )
for(i in 1:length(seq1)){
for(j in 1:length(seq2)){
A[i,j] =  normal_multivar( matrix(c(seq1[i],seq2[j])) , f1$mean, f1$S )
}
}
image( seq1, seq2, A, col=topo.colors(100) )
image( seq1, seq2, A, col=heat.colors(100) )
image( seq1, seq2, A, col=cm.colors(100) )
image( seq1, seq2, A, col=terrain.colors(100) )
image( seq1, seq2, A, col=topo.colors(100) )
image( seq1, seq2, A, col=hcl.colors(100) )
image( seq1, seq2, A, col=topo.colors(100, pallete='blue') )
image( seq1, seq2, A, col=heat.colors(4) )
image( seq1, seq2, A, col=heat.colors(5) )
image( seq1, seq2, A, col=heat.colors(10) )
image( seq1, seq2, A, col=heat.colors(100) )
image( seq1, seq2, A, col=heat.colors(50) )
image( seq1, seq2, A, col=heat.colors(20) )
B = matrix(0,ncol = n, nrow = n)
for(i in 1:length(seq1)){
for(j in 1:length(seq2)){
A[i,j] =  normal_multivar( matrix(c(seq1[i],seq2[j])) , f1$mean, f1$S )
B[i,j] =  normal_multivar( matrix(c(seq1[i],seq2[j])) , f2$mean, f2$S )
}
}
image( seq1, seq2, A, col=heat.colors(20) )
image( seq1, seq2, B, col=heat.colors(20) )
image( seq1, seq2, A, col=heat.colors(20) )
par(new=TRUE)
image( seq1, seq2, B, col=heat.colors(20) )
plot(A)
plot(seq1,A)
plot(x=seq1,A)
plot(B,A)
plot(A,B)
library(MASS)
f1 = list(mu = 0, sigma = 1, col = 'red')
f2 = list(mu = 1, sigma = 2, col = 'green')
normal_1d = function(vals, mu=0, sigma=1) {
res = c()
for(x in vals){
p1 = 1/(sigma*sqrt(2*pi))
p2 = exp(-0.5*((x - mu)**2/sigma**2))
res = c(res,p1*p2)
}
return(res)
}
insertPoint = function(p){
if(normal_1d(p, f1$mu, f1$sigma) < normal_1d(p, f2$mu, f2$sigma)){
points(p,0, col=f2$col, cex = 0.5, pch = 20,)
} else if(normal_1d(p, f1$mu, f1$sigma) > normal_1d(p, f2$mu, f2$sigma)){
points(p,0, col=f1$col, cex = 0.5, pch = 20,)
} else {
print(p)
points(p,0, col='black', cex = 0.5, pch = 20)
}
}
# testing one variable normal plot:
vals = seq(-5, 5, length=1000)
plot(1, type="n", xlab="", ylab="", xlim=c(-5, 5), ylim=c(0, 0.5))
lines(vals, normal_1d(vals, f1$mu, f1$sigma), lwd=1, col=f1$col)
lines(vals, normal_1d(vals, f2$mu, f2$sigma), lwd=1, col=f2$col)
for(i in seq(-5,5,by=0.001)){
insertPoint(i)
}
# points(1,0.4, cex = 0.5, pch = 20, col = 'red')
plot(1:2,1:2)
plot(1:3,1:3)
plot(seq(1:3),1:3)
plot(seq(1,3),1:3)
plot(seq(1,3, by=0.5),1:3)
plot(seq(1,3, by=0.5),seq(1,3, by=0.5))
plot(1:3,1:3)
plot(1,1:3)
plot(1,c(1:3))
plot(1,1)
plot(1,2,1,1)
plot(c(1,2),c(1,1))
plot(c(1,2,3),c(1,1,1))
plot(c(1,2,3),c(1,1,1))
for(i in 1:100){
for(j in 1:100){
plot(i,j)
}
}
plot(c(1,2,3),c(1,1,1))
for(i in 1:100){
for(j in 1:100){
points(i,j)
}
}
image( seq1, seq2, A, col=heat.colors(20) )
image( seq1, seq2, B, col=heat.colors(20) )
f1 = list(mean = matrix(c(2,1)), S = matrix(c(1,0.9,0.9,1),2,2) )
for(i in 1:length(seq1)){
for(j in 1:length(seq2)){
A[i,j] =  normal_multivar( matrix(c(seq1[i],seq2[j])) , f1$mean, f1$S )
B[i,j] =  normal_multivar( matrix(c(seq1[i],seq2[j])) , f2$mean, f2$S )
}
}
for(i in 1:length(seq1)){
for(j in 1:length(seq2)){
A[i,j] =  normal_multivar( matrix(c(seq1[i],seq2[j])) , f1$mean, f1$S )
B[i,j] =  normal_multivar( matrix(c(seq1[i],seq2[j])) , f2$mean, f2$S )
}
}
f1 = list(mean = matrix(c(2,1)), S = matrix(c(2,1,1,2),2,2) )
for(i in 1:length(seq1)){
for(j in 1:length(seq2)){
A[i,j] =  normal_multivar( matrix(c(seq1[i],seq2[j])) , f1$mean, f1$S )
B[i,j] =  normal_multivar( matrix(c(seq1[i],seq2[j])) , f2$mean, f2$S )
}
}
A = matrix(0,ncol = n, nrow = n)
B = matrix(0,ncol = n, nrow = n)
for(i in 1:length(seq1)){
for(j in 1:length(seq2)){
A[i,j] =  normal_multivar( matrix(c(seq1[i],seq2[j])) , f1$mean, f1$S )
B[i,j] =  normal_multivar( matrix(c(seq1[i],seq2[j])) , f2$mean, f2$S )
}
}
# install.packages('plotly')
library(LaplacesDemon)
library(plotly)
library(MASS)
f1 = list(mean = matrix(c(2,1)), S = matrix(c(2,1,1,2),2,2) )
f2 = list(mean = matrix(c(0,0)), S = matrix(c(1,3/5,3/5,2),2,2) )
normal_multivar = function(vals, mean, S){
# extrair dimens達o k
k = dim(vals)[1]
p1 = (2*pi)**(-k/2)
# calcular  a determinante da matriz de covariancia
detm = det(S)
p2 = detm**(-1/2)
# calcular a matriz inversa da matriz de cov
dif = (vals - mean)
p3 = exp( (-0.5*t(dif)%*%ginv(S))%*%dif )
return(p1*p2*p3)
}
vals = matrix(c(2,-2))
res = normal_multivar(vals, f1$mean, f1$S)
# # testing with library
# dmvt(c(vals), c(f1$mean),f1$S)
# plotting
n = 200
seq1 = seq(-5,5, length = n)
seq2 = seq(-5,5, length = n)
A = matrix(0,ncol = n, nrow = n)
B = matrix(0,ncol = n, nrow = n)
for(i in 1:length(seq1)){
for(j in 1:length(seq2)){
A[i,j] =  normal_multivar( matrix(c(seq1[i],seq2[j])) , f1$mean, f1$S )
B[i,j] =  normal_multivar( matrix(c(seq1[i],seq2[j])) , f2$mean, f2$S )
}
}
image( seq1, seq2, A, col=heat.colors(20) )
image( seq1, seq2, B, col=heat.colors(20) )
image( seq1, seq2, A, col=heat.colors(20) )
B[i,j] =  normal_multivar( matrix(c(seq1[i],seq2[j])) , f2$mean, f2$S )
image( seq1, seq2, B, col=heat.colors(20) )
library(LaplacesDemon)
library(plotly)
library(MASS)
f1 = list(mean = matrix(c(2,1)), S = matrix(c(2,1,1,2),2,2) )
f2 = list(mean = matrix(c(0,0)), S = matrix(c(1,3/5,3/5,2),2,2) )
normal_multivar = function(vals, mean, S){
# extrair dimens達o k
k = dim(vals)[1]
p1 = (2*pi)**(-k/2)
# calcular  a determinante da matriz de covariancia
detm = det(S)
p2 = detm**(-1/2)
# calcular a matriz inversa da matriz de cov
dif = (vals - mean)
p3 = exp( (-0.5*t(dif)%*%ginv(S))%*%dif )
return(p1*p2*p3)
}
vals = matrix(c(2,-2))
res = normal_multivar(vals, f1$mean, f1$S)
# plotting
n = 200
seq1 = seq(-5,5, length = n)
seq2 = seq(-5,5, length = n)
for(i in 1:length(seq1)){
for(j in 1:length(seq2)){
A[i,j] =  sqrt(normal_multivar( matrix(c(seq1[i],seq2[j])) , f1$mean, f1$S ) * normal_multivar( matrix(c(seq1[i],seq2[j])) , f2$mean, f2$S ))
}
}
image( seq1, seq2, A, col=heat.colors(20) )
for(i in 1:length(seq1)){
for(j in 1:length(seq2)){
A[i,j] =  normal_multivar( matrix(c(seq1[i],seq2[j])) , f1$mean, f1$S ) * normal_multivar( matrix(c(seq1[i],seq2[j])) , f2$mean, f2$S )
}
}
image( seq1, seq2, A, col=heat.colors(20) )
for(i in 1:length(seq1)){
for(j in 1:length(seq2)){
A[i,j] =  normal_multivar( matrix(c(seq1[i],seq2[j])) , f1$mean, f1$S ) + normal_multivar( matrix(c(seq1[i],seq2[j])) , f2$mean, f2$S )
}
}
image( seq1, seq2, A, col=heat.colors(20) )
image( seq1, seq2, A/2, col=heat.colors(20) )
for(i in 1:length(seq1)){
for(j in 1:length(seq2)){
A[i,j] =  normal_multivar( matrix(c(seq1[i],seq2[j])) , f1$mean, f1$S ) / normal_multivar( matrix(c(seq1[i],seq2[j])) , f2$mean, f2$S )
}
}
image( seq1, seq2, A, col=heat.colors(20) )
for(i in 1:length(seq1)){
for(j in 1:length(seq2)){
A[i,j] =  normal_multivar( matrix(c(seq1[i],seq2[j])) , f1$mean, f1$S )
B[i,j] =  normal_multivar( matrix(c(seq1[i],seq2[j])) , f2$mean, f2$S )
}
}
image( seq1, seq2, A, col=heat.colors(20) )
image( seq1, seq2, B, col=heat.colors(20) )
data.frame(seq1,seq2,A,B)
data.frame(seq1,seq2,A,B, row.names = c('1','2','3','4'))
data.frame(seq1,seq2,A,B, names = c('1','2','3','4'))
df = data.frame(seq1,seq2,A,B, names = c('1','2','3','4'))
seq1
A
for(i in 1:length(seq1)){
for(j in 1:length(seq2)){
A[i,j] =  normal_multivar( matrix(c(seq1[i],seq2[j])) , f1$mean, f1$S )
B[i,j] =  normal_multivar( matrix(c(seq1[i],seq2[j])) , f2$mean, f2$S )
}
}
A
plot(A)
plot(seq1, seq2, A)
plot(A)
plot(1:200,A)
plot(c(1:200,1:200),A)
plot(c(1:400),A)
plot(c(1:4000),A)
length(A)
plot(c(A))
plot(c(B))
plot(c(A), main = 'function 1')
plot(c(B), main = 'function 2')
par(1,2)
par(nrow = c(1,2))
?par
par(mfrow = c(1,2))
plot(c(A), main = 'function 1')
plot(c(B), main = 'function 2')
plot(c(A), main = 'function 1', type='l')
plot(c(B), main = 'function 2',  type='l')
lines(c(A), main = 'function 1')
lines(c(B), main = 'function 2')
par(mfrow = c(1,1))
plot(1, type="n", xlab="", ylab="", xlim=c(-5, 5), ylim=c(0, 0.5))
lines(c(A), main = 'function 1')
lines(c(B), main = 'function 2')
lines(c(A), main = 'function 1')
par(mfrow = c(1,1))
lines(c(A), main = 'function 1')
plot(c(A), main = 'function 1')
plot(c(A), main = 'function 1')
par(mfrow = c(1,1))
plot(c(A), main = 'function 1')
plot(1, type="n", xlab="", ylab="", xlim=c(0, 40000), ylim=c(0, 1))
lines(c(A), main = 'function 1')
lines(c(B), main = 'function 2')
par(mfrow = c(1,1))
plot(1, type="n", xlab="", ylab="", xlim=c(0, 40000), ylim=c(0, 0.5))
lines(c(A), main = 'function 1')
lines(c(B), main = 'function 2')
par(mfrow = c(1,1))
plot(1, type="n", xlab="", ylab="", xlim=c(0, 40000), ylim=c(0, 0.3))
lines(c(A), main = 'function 1')
lines(c(B), main = 'function 2')
par(mfrow = c(1,1))
plot(1, type="n", xlab="", ylab="", xlim=c(0, 40000), ylim=c(0, 0.1))
lines(c(A), main = 'function 1')
lines(c(B), main = 'function 2')
par(mfrow = c(1,1))
plot(1, type="n", xlab="", ylab="", xlim=c(0, 40000), ylim=c(0, 0.2))
lines(c(A), main = 'function 1')
lines(c(B), main = 'function 2')
par(mfrow = c(1,1))
plot(1, type="n", xlab="", ylab="", xlim=c(0, 40000), ylim=c(0, 0.15))
lines(c(A), main = 'function 1')
lines(c(B), main = 'function 2')
lines(c(A), main = 'function 1', col = 'red')
lines(c(B), main = 'function 2', col = 'green')
par(mfrow = c(1,1))
plot(1, type="n", xlab="", ylab="", xlim=c(0, 40000), ylim=c(0, 0.15))
points(c(A), main = 'function 1', col = 'red')
points(c(B), main = 'function 2', col = 'green')
par(mfrow = c(1,1))
plot(1, type="n", xlab="", ylab="", xlim=c(0, 40000), ylim=c(0, 0.15))
points(c(A), main = 'function 1', col = 'red', cex = 0.5, pch = 20)
points(c(B), main = 'function 2', col = 'green', cex = 0.5, pch = 20)
normal_multivar
# install.packages('plotly')
library(LaplacesDemon)
library(plotly)
library(MASS)
f1 = list(mean = matrix(c(2,1)), S = matrix(c(2,1,1,2),2,2) )
f2 = list(mean = matrix(c(0,0)), S = matrix(c(1,3/5,3/5,2),2,2) )
normal_multivar = function(vals, mean, S){
# extrair dimens達o k
k = dim(vals)[1]
p1 = (2*pi)**(-k/2)
# calcular  a determinante da matriz de covariancia
detm = det(S)
p2 = detm**(-1/2)
# calcular a matriz inversa da matriz de cov
dif = (vals - mean)
p3 = exp( (-0.5*t(dif)%*%ginv(S))%*%dif )
return(p1*p2*p3)
}
vals = matrix(c(2,-2))
res = normal_multivar(vals, f1$mean, f1$S)
# # testing with library
# dmvt(c(vals), c(f1$mean),f1$S)
# plotting
n = 200
seq1 = seq(-5,5, length = n)
seq2 = seq(-5,5, length = n)
A = matrix(0,ncol = n, nrow = n)
B = matrix(0,ncol = n, nrow = n)
for(i in 1:length(seq1)){
for(j in 1:length(seq2)){
A[i,j] =  normal_multivar( matrix(c(seq1[i],seq2[j])) , f1$mean, f1$S )
B[i,j] =  normal_multivar( matrix(c(seq1[i],seq2[j])) , f2$mean, f2$S )
}
}
image( seq1, seq2, A, col=heat.colors(20) )
image( seq1, seq2, B, col=heat.colors(20) )
par(mfrow = c(1,1))
plot(1, type="n", xlab="", ylab="", xlim=c(0, 40000), ylim=c(0, 0.15))
points(c(A), main = 'function 1', col = 'red', cex = 0.5, pch = 20)
points(c(B), main = 'function 2', col = 'green', cex = 0.5, pch = 20)
