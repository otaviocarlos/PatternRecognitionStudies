A = matrix(0,ncol = n, nrow = n)
image( seq1, seq2, A, col=heat.colors(20) )
plot(1, type="n", xlab="", ylab="", xlim=c(0, 40000), ylim=c(0, 0.15))
points(c(A), main = 'function 1', col = 'red', cex = 0.5, pch = 20)
plot(c(A),c(B))
B = matrix(0,ncol = n, nrow = n)
plot(c(A),c(B))
for(i in 1:length(seq1)){
for(j in 1:length(seq2)){
A[i,j] =  normal_multivar( matrix(c(seq1[i],seq2[j])) , f1$mean, f1$S )
B[i,j] =  normal_multivar( matrix(c(seq1[i],seq2[j])) , f2$mean, f2$S )
C[i,j] =  normal_multivar( matrix(c(seq1[i],seq2[j])) , f3$mean, f3$S )
}
}
plot(c(A),c(B))
plot(1, type="n", xlab="", ylab="", xlim=c(0, 40000), ylim=c(0, 0.15))
points(c(A), main = 'function 1', col = 'red', cex = 0.5, pch = 20)
points(c(B), main = 'function 2', col = 'green', cex = 0.5, pch = 20)
points(c(C), main = 'function 2', col = 'blue', cex = 0.5, pch = 20)
points(c(A), main = 'function 1', col = 'red', cex = 0.5, pch = 20)
points(c(B), main = 'function 2', col = 'green', cex = 0.5, pch = 20)
points(c(A), main = 'function 1', col = 'red', cex = 0.5, pch = 20)
image( seq1, seq2, C, col=heat.colors(20) )
image( seq1, seq2, B, col=heat.colors(20) )
image( seq1, seq2, A, col=heat.colors(20) )
image( seq1, seq2, C, col=heat.colors(20) )
image( seq1, seq2, A, col=heat.colors(20) )
contour( seq1, seq2 )
contour( seq1, seq2 , A)
image( seq1, seq2, A, col=heat.colors(20) )
contour( seq1, seq2 , A, add = T)
contour( seq1, seq2 , A, add = T)
contour( seq1, seq2 , A, add = T)
contour( seq1, seq2 , A, add = T)
contour( seq1, seq2 , A, add = T)
contour( seq1, seq2 , A, add = T)
image( seq1, seq2, B, col=heat.colors(20) )
image( seq1, seq2, C, col=heat.colors(20) )
par(mfrow = c(1,1))
plot(1, type="n", xlab="", ylab="", xlim=c(0, 40000), ylim=c(0, 0.15))
points(c(A), main = 'function 1', col = 'red', cex = 0.5, pch = 20)
image( seq1, seq2, A, col=heat.colors(20) )
contour( seq1, seq2 , A, add = T)
image( seq1, seq2, B, col=heat.colors(20) )
contour( seq1, seq2 , B, add = T)
image( seq1, seq2, C, col=heat.colors(20) )
contour( seq1, seq2 , C, add = T)
plot(1, type="n", xlab="", ylab="", xlim=c(0, 40000), ylim=c(0, 0.15))
contour( seq1, seq2 , A, add = T)
image( seq1, seq2, C, col=heat.colors(20) )
plot(1, type="n", xlab="", ylab="", xlim=c(0, 40000), ylim=c(0, 0.15))
contour( seq1, seq2 , A, add = T)
contour( seq1, seq2 , B, add = T)
contour( seq1, seq2 , C, add = T)
x11()
contour( seq1, seq2 , A, add = F, col='magenta')
contour( seq1, seq2 , B, add = F, col='blue')
contour( seq1, seq2 , C, add = F, col ='green')
# plotting curve level
x11()
contour( seq1, seq2 , A, add = T, col='magenta')
contour( seq1, seq2 , A, add = F, col='magenta')
contour( seq1, seq2 , B, add = T, col='blue')
contour( seq1, seq2 , C, add = T, col ='green')
# plotting decision frontier
D = matrix(0, ncol = n, nrow = n)
for(i in 1:length(seq1)){
for(j in 1:length(seq2)){
D[i,j] = A[i,j] - B[i,j]
}
}
x11()
image(seq1, seq2, D, col = heat.colors(100))
contour(seq1,seq2, D, add = T)
# plotting decision frontier
D = matrix(0, ncol = n, nrow = n)
for(i in 1:length(seq1)){
for(j in 1:length(seq2)){
D[i,j] = A[i,j] - B[i,j] - C[i,j]
}
}
x11()
image(seq1, seq2, D, col = heat.colors(100))
contour(seq1,seq2, D, add = T)
for(i in 1:length(seq1)){
for(j in 1:length(seq2)){
D[i,j] = sqrt((A[i,j] - B[i,j] - C[i,j])**2)
}
}
x11()
image(seq1, seq2, D, col = heat.colors(100))
contour(seq1,seq2, D, add = T)
for(i in 1:length(seq1)){
for(j in 1:length(seq2)){
D[i,j] = A[i,j] - B[i,j] - C[i,j]
}
}
x11()
image(seq1, seq2, D, col = heat.colors(100))
contour(seq1,seq2, D, add = T)
x11()
image(seq1, seq2, D, col = heat.colors(100))
contour(seq1,seq2, D, add = T)
# plotting curve level
x11()
contour( seq1, seq2 , A, add = F, col='magenta')
contour( seq1, seq2 , B, add = T, col='blue')
contour( seq1, seq2 , C, add = T, col ='green')
# plotting curve level
x11()
contour( seq1, seq2 , C, add = F, col ='green')
f3 = list(mean = matrix(c(3,2)), S = matrix(c(1,0.7,0,  0.7,1,0  0,0,1),3,3) )
f4 = list(mean = matrix(c(3,2)), S = matrix(c(1,0.7,0,  0.7,1,0  0,0,1),3,3) )
f4 = list(mean = matrix(c(3,2)), S = matrix(c(1,0.7,0,  0.7,1,0,  0,0,1),3,3) )
f4 = list(mean = matrix(c(0,5,0)), S = matrix(c(1,0.7,0,  0.7,1,0,  0,0,1),3,3) )
# plotting 3D
A = matrix(0,ncol = n, nrow = n)
for(i in 1:length(seq1)){
for(j in 1:length(seq2)){
A[i,j] =  normal_multivar( matrix(c(seq1[i],seq2[j])) , f4$mean, f4$S )
}
}
# plotting 3D
vals = matrix(c(2,-2))
vals
A = matrix(0,ncol = n, nrow = n)
for(i in 1:length(seq1)){
for(j in 1:length(seq2)){
A[i,j] =  normal_multivar( matrix(c(seq1[i],seq2[j])) , f4$mean, f4$S )
}
}
seq3 = seq(-5,5, length = n)
seq1 = seq(-5,5, length = n)
seq2 = seq(-5,5, length = n)
seq3 = seq(-5,5, length = n)
A = matrix(0,ncol = n, nrow = n)
for(i in 1:length(seq1)){
for(j in 1:length(seq2)){
for(k in 1:length(seq3)){
A[i,j,k] =  normal_multivar( matrix(c(seq1[i],seq2[j],seq3[k])) , f4$mean, f4$S )
}
}
}
A
A = matrix(c(1,2),ncol = n, nrow = n)
A
matrix(2)
A = matrix(matrix(2),ncol = n, nrow = n)
A
matrix(2,1)
matrix(2,2)
A = matrix(matrix(2,2),ncol = n, nrow = n)
A
A = matrix(matrix(c(2,2),2,2),ncol = n, nrow = n)
A
A = matrix(matrix(c(0,1),2,2),ncol = n, nrow = n)
A
A = matrix(matrix(c(0,1,2,3),2,2),ncol = n, nrow = n)
A
A = matrix(0,ncol = n, nrow = n)
A = matrix(0,c(n,n))
A = matrix(0,c(n,n,n))
for(i in 1:length(seq1)){
for(j in 1:length(seq2)){
for(k in 1:length(seq3)){
A[i,j,k] =  normal_multivar( matrix(c(seq1[i],seq2[j],seq3[k])) , f4$mean, f4$S )
}
}
}
A = matrix(0, c(n,n,n))
for(i in 1:length(seq1)){
for(j in 1:length(seq2)){
for(k in 1:length(seq3)){
A[i,j,k] =  normal_multivar( matrix(c(seq1[i],seq2[j],seq3[k])) , f4$mean, f4$S )
}
}
}
# plotting
n = 10
seq1 = seq(-5,5, length = n)
seq2 = seq(-5,5, length = n)
seq3 = seq(-5,5, length = n)
A = matrix(0, c(n,n,n))
for(i in 1:length(seq1)){
for(j in 1:length(seq2)){
for(k in 1:length(seq3)){
A[i,j,k] =  normal_multivar( matrix(c(seq1[i],seq2[j],seq3[k])) , f4$mean, f4$S )
}
}
}
A = array(0, dim = c(n,n,n))
A
for(i in 1:length(seq1)){
for(j in 1:length(seq2)){
for(k in 1:length(seq3)){
A[i,j,k] =  normal_multivar( matrix(c(seq1[i],seq2[j],seq3[k])) , f4$mean, f4$S )
}
}
}
# plotting decision frontier
D = array(0, dim = c(n,n,n))
for(i in 1:length(seq1)){
for(j in 1:length(seq2)){
for(k in 1:length(seq3)){
D[i,j] = A[i,j] - B[i,j] - C[i,j]
}
}
}
B = array(0, dim = c(n,n,n))
for(i in 1:length(seq1)){
for(j in 1:length(seq2)){
for(k in 1:length(seq3)){
A[i,j,k] =  normal_multivar( matrix(c(seq1[i],seq2[j],seq3[k])) , f4$mean, f4$S )
B[i,j,k] =  normal_multivar( matrix(c(seq1[i],seq2[j],seq3[k])) , f4$mean, f4$S )
}
}
}
# plotting decision frontier
D = array(0, dim = c(n,n,n))
for(i in 1:length(seq1)){
for(j in 1:length(seq2)){
for(k in 1:length(seq3)){
D[i,j,k] = A[i,j,k] - B[i,j,k]
}
}
}
x11()
image(seq1, seq2, seq3, D, col = heat.colors(100))
f5 = list(mean = matrix(c(1,5,2)), S = matrix(c(1,0.7,0,  0.7,1,0,  0,0,1),3,3) )
A = array(0, dim = c(n,n,n))
B = array(0, dim = c(n,n,n))
for(i in 1:length(seq1)){
for(j in 1:length(seq2)){
for(k in 1:length(seq3)){
A[i,j,k] =  normal_multivar( matrix(c(seq1[i],seq2[j],seq3[k])) , f4$mean, f4$S )
B[i,j,k] =  normal_multivar( matrix(c(seq1[i],seq2[j],seq3[k])) , f5$mean, f5$S )
}
}
}
# plotting decision frontier
D = array(0, dim = c(n,n,n))
for(i in 1:length(seq1)){
for(j in 1:length(seq2)){
for(k in 1:length(seq3)){
D[i,j,k] = A[i,j,k] - B[i,j,k]
}
}
}
image(seq1, seq2, D, col = heat.colors(100))
x11()
image(seq1, seq2, D, col = heat.colors(100))
plot3D(1,1,1)
library(plot3D)
scatter3D(1,1,1)
scatter3D(1, 1, 1, bty = "g", colkey = FALSE, main ="bty= 'g'")
scatter3D(1, 1, 1, phi=0, bty = "g", colkey = FALSE, main ="bty= 'g'")
scatter3D(seq1, seq2, 1, phi=0, bty = "g", colkey = FALSE, main ="bty= 'g'")
scatter3D(seq1, seq2, seq2, phi=0, bty = "g", colkey = FALSE, main ="bty= 'g'")
scatter3D(seq1, seq2, seq3, phi=0, bty = "g", colkey = FALSE, main ="bty= 'g'")
scatter3D(seq1, seq2, seq3, phi=0.1, bty = "g", colkey = FALSE, main ="bty= 'g'")
scatter3D(seq1, seq2, seq3, phi=1, bty = "g", colkey = FALSE, main ="bty= 'g'")
scatter3D(seq1, seq2, seq3, phi=90, bty = "g", colkey = FALSE, main ="bty= 'g'")
scatter3D(seq1, seq2, seq3, phi=90, colkey = FALSE, main ="bty= 'g'")
scatter3D(seq1, seq2, seq3, phi=90, bty = "g", colkey = FALSE)
scatter3D(seq1, seq2, D, phi=90, bty = "g", colkey = FALSE)
scatter3D(seq1, seq2, seq3, D, phi=90, bty = "g", colkey = FALSE)
scatter3D( seq2, seq3, D, phi=90, bty = "g", colkey = FALSE)
library(plotly)
data <- data.frame(x, random_y)
x <- c(1:100)
random_y <- rnorm(100, mean = 0)
data <- data.frame(x, random_y)
p <- plot_ly(data, x = ~x, y = ~random_y, type = 'scatter', mode = 'lines')
chart_link = api_create(p, filename="line-basic")
p
p <- plot_ly(data, x = ~x, y = ~random_y, type = 'scatter3D', mode = 'lines')
p <- plot_ly(seq1, seq2, seq3, type = 'scatter3D', mode = 'lines')
p <- plot_ly(1,1,1, type = 'scatter3D')
p <- plot_ly(x=1,y=1,z=1, type = 'scatter3D')
plot_ly(x=1,y=1,z=1, type = 'scatter3D')
p
p <- plot_ly(x=1,y=1,z=1, type = 'scatter3D', mode = 'lines')
p
plot_ly(x=1,y=1,z=1, type = 'points3D', mode = 'lines')
data = data.frame(seq1,seq2,seq3,D)
plot_ly(data,x=1,y=1,z=1, type = 'points3D', mode = 'lines')
plot_ly(data,x=seq1,y=seq2,z=seq3, type = 'points3D', mode = 'lines')
plot_ly(data,x=seq1,y=seq2,z=seq3, type = 'points3D', mode = 'lines+makers')
library(plotly)
D
n = 10
seq1 = seq(-5,5, length = n)
seq2 = seq(-5,5, length = n)
seq3 = seq(-5,5, length = n)
A = array(0, dim = c(n,n,n))
B = array(0, dim = c(n,n,n))
for(i in 1:length(seq1)){
for(j in 1:length(seq2)){
for(k in 1:length(seq3)){
A[i,j,k] =  normal_multivar( matrix(c(seq1[i],seq2[j],seq3[k])) , f4$mean, f4$S )
B[i,j,k] =  normal_multivar( matrix(c(seq1[i],seq2[j],seq3[k])) , f5$mean, f5$S )
}
}
}
library(LaplacesDemon)
library(plotly)
library(MASS)
for(i in 1:length(seq1)){
for(j in 1:length(seq2)){
for(k in 1:length(seq3)){
D[i,j,k] = A[i,j,k] - B[i,j,k]
}
}
}
D
A = array(0, dim = c(n,n,n))
B = array(0, dim = c(n,n,n))
for(i in 1:length(seq1)){
for(j in 1:length(seq2)){
for(k in 1:length(seq3)){
A[i,j,k] =  normal_multivar( matrix(c(seq1[i],seq2[j],seq3[k])) , f4$mean, f4$S )
B[i,j,k] =  normal_multivar( matrix(c(seq1[i],seq2[j],seq3[k])) , f5$mean, f5$S )
}
}
}
# plotting decision frontier
D = array(0, dim = c(n,n,n))
for(i in 1:length(seq1)){
for(j in 1:length(seq2)){
for(k in 1:length(seq3)){
D[i,j,k] = A[i,j,k] - B[i,j,k]
}
}
}
library(plotly)
plot_ly(D)
plot_ly(D, x=seq1)
plot_ly(data.frame(D) , x=seq1)
plot_ly(data.frame(D) , x=seq1, y = seq2)
plot_ly(data.frame(D) , x=seq1, y = seq2, z = seq3)
plot_ly(data.frame(D) , x=seq1, y = seq2, z = seq3, type = 'scatter3d')
plot_ly(data.frame(D) , x=seq1, y = seq2, z = seq3, type = 'scatter3d', mode = 'lines')
plot_ly(data.frame(D) , x=seq1, y = seq2, z = seq3, type = 'scatter3d', mode = 'lines') %>% add_surface()
plot_ly(data.frame(D) , x=seq1, y = seq2, z = matrix(seq3), type = 'scatter3d', mode = 'lines') %>% add_surface()
plot_ly(data.frame(D) , x=seq1, y = seq2, z = seq3, type = 'scatter3d', mode = 'lines')
plot_ly(data.frame(D) , x=seq1, y = seq2, z = seq3, type = 'scatter3d', mode = 'lines')
f5 = list(mean = matrix(c(1,5,2)), S = matrix(c(0.5,0.7,0,  0.7,0.5,0,  0,0,0.5),3,3) )
A = array(0, dim = c(n,n,n))
B = array(0, dim = c(n,n,n))
for(i in 1:length(seq1)){
for(j in 1:length(seq2)){
for(k in 1:length(seq3)){
A[i,j,k] =  normal_multivar( matrix(c(seq1[i],seq2[j],seq3[k])) , f4$mean, f4$S )
B[i,j,k] =  normal_multivar( matrix(c(seq1[i],seq2[j],seq3[k])) , f5$mean, f5$S )
}
}
}
# plotting decision frontier
D = array(0, dim = c(n,n,n))
for(i in 1:length(seq1)){
for(j in 1:length(seq2)){
for(k in 1:length(seq3)){
D[i,j,k] = A[i,j,k] - B[i,j,k]
}
}
}
library(plotly)
plot_ly(data.frame(D) , x=seq1, y = seq2, z = seq3, type = 'scatter3d', mode = 'lines')
f5 = list(mean = matrix(c(1,5,2)), S = matrix(c(2/5,0.7,0,  0.7,2/5,0,  0,0,1),3,3) )
normal_multivar = function(vals, mean, S){
# extrair dimensão k
k = dim(vals)[1]
p1 = (2*pi)**(-k/2)
# calcular  a determinante da matriz de covariancia
detm = det(S)
p2 = detm**(-1/2)
# calcular a matriz inversa da matriz de cov
dif = (vals - mean)
p3 = exp( (-0.5*t(dif)%*%ginv(S))%*%dif )
return(p1*p2*p3)
}
# plotting 3D
library(plotly)
n = 10
seq1 = seq(-5,5, length = n)
seq2 = seq(-5,5, length = n)
seq3 = seq(-5,5, length = n)
A = array(0, dim = c(n,n,n))
B = array(0, dim = c(n,n,n))
for(i in 1:length(seq1)){
for(j in 1:length(seq2)){
for(k in 1:length(seq3)){
A[i,j,k] =  normal_multivar( matrix(c(seq1[i],seq2[j],seq3[k])) , f4$mean, f4$S )
B[i,j,k] =  normal_multivar( matrix(c(seq1[i],seq2[j],seq3[k])) , f5$mean, f5$S )
}
}
}
# plotting decision frontier
D = array(0, dim = c(n,n,n))
for(i in 1:length(seq1)){
for(j in 1:length(seq2)){
for(k in 1:length(seq3)){
D[i,j,k] = A[i,j,k] - B[i,j,k]
}
}
}
plot_ly(data.frame(D) , x=seq1, y = seq2, z = seq3, type = 'scatter3d', mode = 'lines')
plot_ly(data.frame(D) , x=seq1, y = seq2, z = seq3, type = 'scatter3d')
plot_ly(data.frame(D) , x=seq1, y = seq2, z = seq3, type = 'scatter3d', mode='lines')
plot_ly(data.frame(D) , x=seq1, y = seq2, z = seq3, type = 'scatter3d', mode='lines', lwd = 5)
plot_ly(data.frame(D) , x=seq1, y = seq2, z = seq3, type = 'scatter3d', mode='lines', lwd = 50)
plot_ly(data.frame(D) , x = seq2, y = seq2, z = seq3, type = 'scatter3d', mode='lines')
plot_ly(data.frame(D) , x = 1, y = seq2, z = seq3, type = 'scatter3d', mode='lines')
plot_ly(data.frame(D) , x = D, y = seq2, z = seq3, type = 'scatter3d', mode='lines')
plot_ly( x = data.frame(D), y = seq2, z = seq3, type = 'scatter3d', mode='lines')
plot_ly( x = seq1, y = seq2, z = seq3, type = 'scatter3d', mode='lines')
plot_ly(z = ~volcano)
plot_ly(z = ~volcano) %>% add_surface()
f1 = list(mean = matrix(c(2,1)), S = matrix(c(2,1,1,2),2,2) )
f2 = list(mean = matrix(c(0,0)), S = matrix(c(1,3/5,3/5,2),2,2) )
f3 = list(mean = matrix(c(3,2)), S = matrix(c(1,0,0,1),2,2) )
normal_multivar = function(vals, mean, S){
# extrair dimensão k
k = dim(vals)[1]
p1 = (2*pi)**(-k/2)
# calcular  a determinante da matriz de covariancia
detm = det(S)
p2 = detm**(-1/2)
# calcular a matriz inversa da matriz de cov
dif = (vals - mean)
p3 = exp( (-0.5*t(dif)%*%ginv(S))%*%dif )
return(p1*p2*p3)
}
vals = matrix(c(2,-2))
res = normal_multivar(vals, f1$mean, f1$S)
# plotting
n = 200
seq1 = seq(-5,5, length = n)
seq2 = seq(-5,5, length = n)
A = matrix(0,ncol = n, nrow = n)
B = matrix(0,ncol = n, nrow = n)
C = matrix(0,ncol = n, nrow = n)
for(i in 1:length(seq1)){
for(j in 1:length(seq2)){
A[i,j] =  normal_multivar( matrix(c(seq1[i],seq2[j])) , f1$mean, f1$S )
B[i,j] =  normal_multivar( matrix(c(seq1[i],seq2[j])) , f2$mean, f2$S )
C[i,j] =  normal_multivar( matrix(c(seq1[i],seq2[j])) , f3$mean, f3$S )
}
}
image( seq1, seq2, A, col=heat.colors(20) )
contour( seq1, seq2 , A, add = T)
image( seq1, seq2, B, col=heat.colors(20) )
contour( seq1, seq2 , B, add = T)
image( seq1, seq2, C, col=heat.colors(20) )
contour( seq1, seq2 , C, add = T)
image( seq1, seq2, A, col=heat.colors(20) )
t = image( seq1, seq2, A, col=heat.colors(20) )
plot_ly(z = ~t) %>% add_surface()
plot_ly(z = t) %>% add_surface()
contour( seq1, seq2 , A, add = T)
image( seq1, seq2, B, col=heat.colors(20) )
contour( seq1, seq2 , B, add = T)
image( seq1, seq2, C, col=heat.colors(20) )
contour( seq1, seq2 , C, add = T)
# plotting curve level
x11()
contour( seq1, seq2 , A, add = F, col='magenta')
contour( seq1, seq2 , B, add = T, col='blue')
contour( seq1, seq2 , C, add = T, col ='green')
# plotting decision frontier
D = matrix(0, ncol = n, nrow = n)
for(i in 1:length(seq1)){
for(j in 1:length(seq2)){
D[i,j] = A[i,j] - B[i,j] - C[i,j]
}
}
x11()
image(seq1, seq2, D, col = heat.colors(100))
contour(seq1,seq2, D, add = T)
contour(seq1,seq2, D, add = T)
# plotting curve in 2D
par(mfrow = c(1,1))
plot(1, type="n", xlab="", ylab="", xlim=c(0, 40000), ylim=c(0, 0.15))
points(c(A), main = 'function 1', col = 'red', cex = 0.5, pch = 20)
points(c(B), main = 'function 2', col = 'green', cex = 0.5, pch = 20)
points(c(C), main = 'function 2', col = 'blue', cex = 0.5, pch = 20)
n = 10
seq1 = seq(-5,5, length = n)
seq2 = seq(-5,5, length = n)
seq3 = seq(-5,5, length = n)
A = array(0, dim = c(n,n,n))
B = array(0, dim = c(n,n,n))
for(i in 1:length(seq1)){
for(j in 1:length(seq2)){
for(k in 1:length(seq3)){
A[i,j,k] =  normal_multivar( matrix(c(seq1[i],seq2[j],seq3[k])) , f4$mean, f4$S )
B[i,j,k] =  normal_multivar( matrix(c(seq1[i],seq2[j],seq3[k])) , f5$mean, f5$S )
}
}
}
# plotting decision frontier
D = array(0, dim = c(n,n,n))
for(i in 1:length(seq1)){
for(j in 1:length(seq2)){
for(k in 1:length(seq3)){
D[i,j,k] = A[i,j,k] - B[i,j,k]
}
}
}
plot_ly( x = seq1, y = seq2, z = seq3, type = 'scatter3d', mode='lines')
plot_ly( data.frame(D) x = seq1, y = seq2, z = seq3, type = 'scatter3d', mode='lines')
plot_ly( data.frame(D), x = seq1, y = seq2, z = seq3, type = 'scatter3d', mode='lines')
